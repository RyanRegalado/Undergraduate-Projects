function onOpen() {

  DocumentApp.getUi()
    .createMenu('Synonyt')
    .addItem('GO!', 'main')
    .addToUi()
  
  DocumentApp.getUi()
    .createMenu('Synonyt')
    .addItem('Open Sidebar', 'showSidebar')
    .addToUi();
}

function showSidebar() {
  const html = HtmlService.createHtmlOutputFromFile('Sidebar')
    .setTitle('Synonyt')
    .setWidth(300);
  
  DocumentApp.getUi().showSidebar(html);
}



const key = '018fe9af-9f5f-4b9a-91e4-b5129c49e7b9' 


function main() {
  const string = extractSelectedText().trim().toLowerCase()
  const arr = string.split(' ')
  let count = 0;
  for (i = 0; i < arr.length; i++) {
    if (arr[i] != ' ') {
      count++
    }
  }
  if (arr.length > 3 || count > 1) {
    DocumentApp.getUi().alert('Please Select One Word');
  }
  callAPI(string)
  
}

function callAPI(string) {
  try {
    data = grab_json_definition(string, "thesaurus", key);
    let synonyms = data[0].meta.syns[0]
    let display = synonyms[0]
    for (i = 1; i < data[0].meta.syns[0].length; i++) {
      let edited = ", " + synonyms[i]
      display += edited
    }
    DocumentApp.getUi().alert("Synonyms: " + display)
  } catch (error) {
    try {
      second = grab_json_definition(data[0].meta.stems[0], "thesaurus", key)
      let synonyms = second[0].meta.syns[0]
      let display = synonyms[0]
      for (i = 1; i < data[0].meta.syns[0].length; i++) {
        let edited = ", " + synonyms[i]
        display += edited
      }
    DocumentApp.getUi().alert("Synonyms: " + display)


      DocumentApp.getUi.alert("Synonyms: " + synonyms)
    } catch (error) {
      DocumentApp.getUi().alert("Error: Could not fetch synonyms");
    }
  }
}

function grab_json_definition(word, ref, key) {
    let uri = "https://www.dictionaryapi.com/api/v3/references/" + ref + "/json/" + word + "?key=" + key
    let response = UrlFetchApp.fetch(uri)
    let json = response.getContentText()
    let data = JSON.parse(json)
    return data
}

function extractSelectedText() {
  var selection = DocumentApp.getActiveDocument().getSelection();
  var elements = selection.getRangeElements();
  var extractedText = '';

  for (var i = 0; i < elements.length; i++) {
    var element = elements[i];
    if (element.getElement().editAsText) {
      var textElement = element.getElement().editAsText();
      
      if (element.isPartial()) {
        // only part of the element selected
        var start = element.getStartOffset();
        var end = element.getEndOffsetInclusive();
        extractedText += textElement.getText().substring(start, end + 1);
      } else {
        // whole element selected
        extractedText += textElement.getText();
      }
    }
  }
  Logger.log(extractedText)
  return extractedText
}

